input AddTodoInput {
  userId: String!
  text: String!
  clientMutationId: String
}

type AddTodoPayload {
  clientMutationId: String
  todoEdge: TodoEdge
}

input CreateSessionInput {
  username: String!
  password: String!
  clientMutationId: String
}

type CreateSessionPayload {
  viewer: viewer
  clientMutationId: String
}

input DeleteTodoInput {
  nodeId: ID!
  clientMutationId: String
}

type DeleteTodoPayload {
  deletedId: ID
  clientMutationId: String
}

input EditTodoInput {
  userId: String!
  nodeId: String!
  text: String
  status: String
  clientMutationId: String
}

type EditTodoPayload {
  clientMutationId: String
  todoEdge: TodoEdge
}

type Mutation {
  addTodo(input: AddTodoInput!): AddTodoPayload
  deleteTodo(input: DeleteTodoInput!): DeleteTodoPayload
  editTodo(input: EditTodoInput!): EditTodoPayload
  createSession(input: CreateSessionInput!): CreateSessionPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  todo(nodeId: String!): Todo
  viewer(nodeId: String!): viewer

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""A task"""
type Todo implements Node {
  """The ID of an object"""
  id: ID!

  """The text of the todo item."""
  text: String

  """The status of the todo item."""
  status: String
}

"""A connection to a list of items."""
type TodoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]
}

"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge"""
  node: Todo

  """A cursor for use in pagination"""
  cursor: String!
}

"""A logged in user"""
type viewer implements Node {
  """The ID of an object"""
  id: ID!

  """email address."""
  email: String

  """first and last name."""
  username: String

  """jwt tokwn."""
  token: String

  """The user's todo list."""
  list(after: String, first: Int, before: String, last: Int): TodoConnection
}
